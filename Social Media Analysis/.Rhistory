# 出手球員的id與name
player_list <- records %>% select(player_name, player_id) %>% unique() %>% rename(name = player_name)
# 統一姓名格式
pro_records <- records %>%
separate(CLOSEST_DEFENDER, c("first_name", "last_name"), fill = "warn", sep = ", ") %>%
unite("defender_name", last_name, first_name, sep =" ") %>%
left_join(player_list, by = c("CLOSEST_DEFENDER_PLAYER_ID" = "player_id")) %>%
mutate(defender_name = ifelse(!is.na(name), name, tolower(defender_name))) %>%
select(-name)
shot_Data = pro_records %>%
na.omit(shot_Data) %>%
filter(SHOT_CLOCK!=24 & TOUCH_TIME>=0)
shot_Data$PTS_TYPE = as.factor(shot_Data$PTS_TYPE)
pro_records
home_away_WL = shot_Data %>%
select(GAME_ID, MATCHUP, LOCATION, W, FINAL_MARGIN) %>%
unique() %>%
arrange(GAME_ID) %>%
filter(LOCATION == "H") %>%
mutate(WL = W, A_FINAL_MARGIN = FINAL_MARGIN) %>%
select(GAME_ID, MATCHUP, WL, A_FINAL_MARGIN)
home_away_WL$MATCHUP = as.character(home_away_WL$MATCHUP)
home_away_WL = separate(home_away_WL, MATCHUP, into = c("date", "gameteam"), sep = " - ")
home_away_WL = separate(home_away_WL, gameteam, into = c("A_team", "H_team"), sep = " @ ")
home_away_WL %>%
ggplot(aes(x = WL, fill = WL)) +
geom_bar()
home_away_WL %>%
group_by(WL) %>%
count() %>%
ungroup() %>%
mutate(total = sum(n)) %>%
mutate(percent = n/total)
most_success_Def = shot_Data %>%
filter(SHOT_RESULT=="missed") %>%
group_by(defender_name) %>%
summarise(Success = n()) %>%
arrange(desc(Success))
most_failure_Def = shot_Data %>%
filter(SHOT_RESULT=="made") %>%
group_by(defender_name) %>%
summarise(Failure = n()) %>%
arrange(desc(Failure))
success_percent_Def = full_join(most_success_Def, most_failure_Def, by="defender_name")
success_percent_Def[is.na(success_percent_Def)] <- 1
success_percent_Def = success_percent_Def %>%
mutate(Percent = (Success/(Success+Failure))) %>%
arrange(desc(Percent))
success_percent_Def %>%
filter(Success >= 100 & Failure >= 100) %>%
top_n(10)
success_percent_Def %>%
filter(Success >= 100 & Failure >= 100) %>%
ggplot(aes(x = Percent)) +
geom_density()
most_success_player<- shot_Data %>%
filter(SHOT_RESULT=="made") %>%
group_by(player_name) %>%
summarise(Success = n()) %>%
arrange(desc(Success))
most_failure_player<- shot_Data %>%
filter(SHOT_RESULT=="missed") %>%
group_by(player_name) %>%
summarise(Failure = n()) %>%
arrange(desc(Failure))
success_percent_player = full_join(most_success_player, most_failure_player, by="player_name")
success_percent_player[is.na(success_percent_player)] <- 1
success_percent_player = success_percent_player %>%
mutate(Percent = (Success/(Success+Failure))) %>%
arrange(desc(Percent))
success_percent_player %>%
filter(Success >= 100 & Failure >= 100) %>%
top_n(10)
success_percent_player %>%
filter(Success >= 100 & Failure >= 100) %>%
ggplot(aes(x = Percent)) +
geom_density()
success_percent_player %>%
rename(name = player_name) %>%
filter(Success>100 & Failure>100) %>%
left_join(success_percent_Def %>% rename(name = defender_name) %>% filter(Success>100 & Failure>100), by = "name") %>%
rename(playP = Percent.x, defP = Percent.y) %>%
select(name, playP, defP) %>%
na.omit() %>%
ggplot(aes(x = playP, y = defP, color = abs(defP - playP))) +
geom_abline(color = "gray40", lty = 2, slope = 0.5457545/0.4525722) +
geom_vline(xintercept = 0.4525722, color="orange") +
geom_hline(yintercept = 0.5457545, color="orange") +
geom_jitter(alpha = 0.3, size = 2.5) +
geom_text(aes(label = name), check_overlap = TRUE) +
theme(legend.position="none") +
labs(x = "FG%", y = "DEF%")
shot_Data %>%
group_by(PTS_TYPE, SHOT_RESULT) %>%
summarise(total = n()) %>%
ggplot(aes(x=PTS_TYPE, y=total, fill=SHOT_RESULT)) +
geom_bar(stat="identity", position="fill") +
geom_text(aes(label = total), position = position_fill(0.5)) +
xlab("分數種類") +
ylab("命中率") +
ggtitle("兩分球、三分球投進/未投進數量比") +
theme(text = element_text(family = "Heiti TC Light"))
shot_Data %>%
group_by(PTS_TYPE) %>%
summarise(PTS_TYPE_EXP = mean(PTS))
two_three_points = shot_Data %>%
group_by(GAME_ID, LOCATION, PTS_TYPE, W) %>%
summarise(TOTAL_SHOT_NUM = n()) %>%
spread(PTS_TYPE, TOTAL_SHOT_NUM) %>%
setNames(c("GAME_ID", "LOCATION", "W", "PTS_TYPE_2", "PTS_TYPE_3")) %>%
mutate(total_shot = PTS_TYPE_2 + PTS_TYPE_3, shot3_prop = PTS_TYPE_3 / total_shot) %>%
na.omit()
two_three_points %>%
ggplot(aes(x=shot3_prop, fill=W, alpha = 0.05)) +
geom_density()
two_three_points %>%
arrange(desc(shot3_prop)) %>%
head(100) %>%
group_by(W) %>%
count()
shot_Data %>%
mutate(def_distance = CLOSE_DEF_DIST + 1) %>% #
group_by(def_distance, PTS_TYPE) %>%
summarise(Percent = mean(FGM)) %>%
ggplot(aes(x = log(def_distance, base = 2), y = Percent)) +
geom_smooth(se = FALSE, method = "loess", formula = 'y ~ x') +
facet_grid(. ~ PTS_TYPE) +
theme_light()
shot_Data %>%
group_by(DRIBBLES) %>%
summarise(Percent = mean(FGM)) %>%
ggplot(aes(x = DRIBBLES, y = Percent)) +
geom_smooth(se = FALSE, method = "loess", formula = 'y ~ x') +
theme_light()
shot_Data %>%
ggplot(aes(x=SHOT_DIST, color=SHOT_RESULT, group=SHOT_RESULT)) +
geom_density() +
xlab("Shot Distance") +
ylab("") +
theme_light()+
geom_vline(xintercept = 22, color="blue") +
geom_text(aes(x=22, label="3-point line", y=0.08), colour="blue", angle=90, vjust = -1)
library(plyr)
library(readr)
library(dplyr)
library(jiebaR)
library(tidyr)
library(tidytext)
library(igraph)
library(topicmodels)
library(stringr)
library(ggplot2)
library(jsonlite)
records = read_csv("shot_logs.csv")
records
# 出手球員的id與name
player_list <- records %>% select(player_name, player_id) %>% unique() %>% rename(name = player_name)
# 統一姓名格式
pro_records <- records %>%
separate(CLOSEST_DEFENDER, c("first_name", "last_name"), fill = "warn", sep = ", ") %>%
unite("defender_name", last_name, first_name, sep =" ") %>%
left_join(player_list, by = c("CLOSEST_DEFENDER_PLAYER_ID" = "player_id")) %>%
mutate(defender_name = ifelse(!is.na(name), name, tolower(defender_name))) %>%
select(-name)
shot_Data = pro_records %>%
na.omit(shot_Data) %>%
filter(SHOT_CLOCK!=24 & TOUCH_TIME>=0)
shot_Data$PTS_TYPE = as.factor(shot_Data$PTS_TYPE)
pro_records
home_away_WL = shot_Data %>%
select(GAME_ID, MATCHUP, LOCATION, W, FINAL_MARGIN) %>%
unique() %>%
arrange(GAME_ID) %>%
filter(LOCATION == "H") %>%
mutate(WL = W, A_FINAL_MARGIN = FINAL_MARGIN) %>%
select(GAME_ID, MATCHUP, WL, A_FINAL_MARGIN)
home_away_WL$MATCHUP = as.character(home_away_WL$MATCHUP)
home_away_WL = separate(home_away_WL, MATCHUP, into = c("date", "gameteam"), sep = " - ")
home_away_WL = separate(home_away_WL, gameteam, into = c("A_team", "H_team"), sep = " @ ")
home_away_WL %>%
ggplot(aes(x = WL, fill = WL)) +
geom_bar()
home_away_WL %>%
group_by(WL) %>%
count() %>%
ungroup() %>%
mutate(total = sum(n)) %>%
mutate(percent = n/total)
most_success_Def = shot_Data %>%
filter(SHOT_RESULT=="missed") %>%
group_by(defender_name) %>%
summarise(Success = n()) %>%
arrange(desc(Success))
most_failure_Def = shot_Data %>%
filter(SHOT_RESULT=="made") %>%
group_by(defender_name) %>%
summarise(Failure = n()) %>%
arrange(desc(Failure))
success_percent_Def = full_join(most_success_Def, most_failure_Def, by="defender_name")
success_percent_Def[is.na(success_percent_Def)] <- 1
success_percent_Def = success_percent_Def %>%
mutate(Percent = (Success/(Success+Failure))) %>%
arrange(desc(Percent))
success_percent_Def %>%
filter(Success >= 100 & Failure >= 100) %>%
top_n(10)
success_percent_Def %>%
filter(Success >= 100 & Failure >= 100) %>%
ggplot(aes(x = Percent)) +
geom_density()
most_success_player<- shot_Data %>%
filter(SHOT_RESULT=="made") %>%
group_by(player_name) %>%
summarise(Success = n()) %>%
arrange(desc(Success))
most_failure_player<- shot_Data %>%
filter(SHOT_RESULT=="missed") %>%
group_by(player_name) %>%
summarise(Failure = n()) %>%
arrange(desc(Failure))
success_percent_player = full_join(most_success_player, most_failure_player, by="player_name")
success_percent_player[is.na(success_percent_player)] <- 1
success_percent_player = success_percent_player %>%
mutate(Percent = (Success/(Success+Failure))) %>%
arrange(desc(Percent))
success_percent_player %>%
filter(Success >= 100 & Failure >= 100) %>%
top_n(10)
success_percent_player %>%
filter(Success >= 100 & Failure >= 100) %>%
ggplot(aes(x = Percent)) +
geom_density()
success_percent_player %>%
rename(name = player_name) %>%
filter(Success>100 & Failure>100) %>%
left_join(success_percent_Def %>% rename(name = defender_name) %>% filter(Success>100 & Failure>100), by = "name") %>%
rename(playP = Percent.x, defP = Percent.y) %>%
select(name, playP, defP) %>%
na.omit() %>%
ggplot(aes(x = playP, y = defP, color = abs(defP - playP))) +
geom_abline(color = "gray40", lty = 2, slope = 0.5457545/0.4525722) +
geom_vline(xintercept = 0.4525722, color="orange") +
geom_hline(yintercept = 0.5457545, color="orange") +
geom_jitter(alpha = 0.3, size = 2.5) +
geom_text(aes(label = name), check_overlap = TRUE) +
theme(legend.position="none") +
labs(x = "FG%", y = "DEF%")
shot_Data %>%
group_by(PTS_TYPE, SHOT_RESULT) %>%
summarise(total = n()) %>%
ggplot(aes(x=PTS_TYPE, y=total, fill=SHOT_RESULT)) +
geom_bar(stat="identity", position="fill") +
geom_text(aes(label = total), position = position_fill(0.5)) +
xlab("分數種類") +
ylab("命中率") +
ggtitle("兩分球、三分球投進/未投進數量比") +
theme(text = element_text(family = "Heiti TC Light"))
shot_Data %>%
group_by(PTS_TYPE) %>%
summarise(PTS_TYPE_EXP = mean(PTS))
two_three_points = shot_Data %>%
group_by(GAME_ID, LOCATION, PTS_TYPE, W) %>%
summarise(TOTAL_SHOT_NUM = n()) %>%
spread(PTS_TYPE, TOTAL_SHOT_NUM) %>%
setNames(c("GAME_ID", "LOCATION", "W", "PTS_TYPE_2", "PTS_TYPE_3")) %>%
mutate(total_shot = PTS_TYPE_2 + PTS_TYPE_3, shot3_prop = PTS_TYPE_3 / total_shot) %>%
na.omit()
two_three_points %>%
ggplot(aes(x=shot3_prop, fill=W, alpha = 0.05)) +
geom_density()
two_three_points %>%
arrange(desc(shot3_prop)) %>%
head(100) %>%
group_by(W) %>%
count()
shot_Data %>%
mutate(def_distance = CLOSE_DEF_DIST + 1) %>% #
group_by(def_distance, PTS_TYPE) %>%
summarise(Percent = mean(FGM)) %>%
ggplot(aes(x = log(def_distance, base = 2), y = Percent)) +
geom_smooth(se = FALSE, method = "loess", formula = 'y ~ x') +
facet_grid(. ~ PTS_TYPE) +
theme_light()
shot_Data %>%
group_by(DRIBBLES) %>%
summarise(Percent = mean(FGM)) %>%
ggplot(aes(x = DRIBBLES, y = Percent)) +
geom_smooth(se = FALSE, method = "loess", formula = 'y ~ x') +
theme_light()
shot_Data %>%
ggplot(aes(x=SHOT_DIST, color=SHOT_RESULT, group=SHOT_RESULT)) +
geom_density() +
xlab("Shot Distance") +
ylab("") +
theme_light()+
geom_vline(xintercept = 22, color="blue") +
geom_text(aes(x=22, label="3-point line", y=0.08), colour="blue", angle=90, vjust = -1)
warriors <- pro_records %>%
filter(str_detect(MATCHUP, "GSW ")) %>%
add_count(defender_name, player_name, name = "d_FG") %>%
group_by(defender_name, player_name, d_FG) %>%
summarise(d_FGM = sum(FGM)) %>%
filter(d_FG >= 10) %>%
ungroup() %>%
mutate(d_FGP = d_FGM/d_FG)
warriors
# 建立網路關係
was_Network <- graph_from_data_frame(d=warriors, directed=T)
# 畫出網路圖
# 線的粗細代表防守到的次數多寡
# 綠線表示防守效益優於平均
# 紅線表示防守效益差於平均
set.seed(231)
E(was_Network)$color <- ifelse(E(was_Network)$d_FGP < mean(E(was_Network)$d_FGP) , "lightgreen", "palevioletred")
E(was_Network)$width <- (E(was_Network)$d_FG/10)^1.5
plot(was_Network, vertex.size=2, edge.arrow.size=0.1, vertex.label.cex=0.7)
# 篩選出總出手次數大於940的紀錄
# 挑出相遇次數大於 15 次的紀錄
count_records <- pro_records %>%
add_count(player_name, name = "p_count") %>%
filter(p_count >= 940) %>%
add_count(defender_name, player_name, name = "d_FG") %>%
group_by(defender_name, player_name, d_FG) %>%
summarise(d_FGM = sum(FGM)) %>%
filter(d_FG >= 15) %>%
ungroup() %>%
mutate(d_FGP = d_FGM/d_FG)
count_records
# 建立網路關係
count_Network <- graph_from_data_frame(d=count_records, directed=T)
# 畫出網路圖
# 線的粗細代表防守到的次數多寡
# 綠線表示防守效益優於平均
# 紅線表示防守效益差於平均
set.seed(1213)
E(count_Network)$color <- ifelse(E(count_Network)$d_FGP < mean(E(count_Network)$d_FGP) , "lightgreen", "palevioletred")
E(count_Network)$width <- E(count_Network)$d_FG/10
plot(count_Network, vertex.size=2, edge.arrow.size=0.2, vertex.label.cex=0.7)
# 出手球員總命中率
field_goal_per <- pro_records %>%
group_by(player_name) %>%
mutate(total_FGM = sum(FGM), total_FG = n()) %>%
mutate(total_FGP = total_FGM/total_FG) %>%
ungroup()
field_goal_per %>% select(defender_name, player_name, FGM, total_FGM, total_FG, total_FGP)
# 出手球員與個別防守球員相對時之命中率
pair_def_records <- field_goal_per %>%
select(defender_name, player_name, FGM, total_FGP) %>%
group_by(defender_name, player_name, total_FGP) %>%
summarise(def_FGM = sum(FGM), def_FG = n()) %>%
mutate(def_FGP = def_FGM/def_FG) %>%
ungroup()
pair_def_records
# 個別組合間的防守效益差距
# 挑出相遇次數大於 8 次的紀錄
# 挑出差異大於 30% 的組合
s_pair_def_records <- pair_def_records %>%
filter(def_FG >= 8) %>%
mutate(dif_FGP = def_FGP - total_FGP) %>%
filter(abs(dif_FGP) >= 0.3) %>%
select(defender_name, player_name, dif_FGP)
s_pair_def_records
# 建立網路關係
s_pair_def_Network <- graph_from_data_frame(d=s_pair_def_records, directed=T)
# 畫出網路圖
# 防守影響較大的關係：綠色
# 防守影響較小的關係：紅色
set.seed(1234)
E(s_pair_def_Network)$color <- ifelse(E(s_pair_def_Network)$dif_FGP < 0 , "lightgreen", "palevioletred")
plot(s_pair_def_Network, vertex.size=2, edge.arrow.size=0.3, vertex.label.cex=0.7)
# 個別組合間的防守效益差距
# 挑出相遇次數的大於 3 次的紀錄
# 挑出差異大於 30% 的組合
first_team_records <- pair_def_records %>%
filter(defender_name == "kawhi leonard" |
defender_name == "draymond green" |
defender_name == "deandre jordan" |
defender_name == "tony allen" |
defender_name == "chris paul") %>%
filter(def_FG >= 3) %>%
mutate(dif_FGP = def_FGP - total_FGP) %>%
filter(abs(dif_FGP) >= 0.3) %>%
select(defender_name, player_name, dif_FGP)
first_team_records
# 建立網路關係
first_team_Network <- graph_from_data_frame(d=first_team_records, directed=T)
# 畫出網路圖
# 防守影響較大的關係：綠色
# 防守影響較小的關係：紅色
set.seed(2019)
E(first_team_Network)$color <- ifelse(E(first_team_Network)$dif_FGP < 0 , "lightgreen", "palevioletred")
plot(first_team_Network, vertex.size=2, edge.arrow.size=0.3, vertex.label.cex=0.7)
# 個別組合間的防守效益差距
# 挑出相遇次數的大於 3 次的紀錄
# 挑出差異大於 30% 的組合
second_team_records <- pair_def_records %>%
filter(defender_name == "anthony davis" |
defender_name == "tim duncan" |
defender_name == "andrew bogut" |
defender_name == "jimmy butler" |
defender_name == "john wall") %>%
filter(def_FG >= 3) %>%
mutate(dif_FGP = def_FGP - total_FGP) %>%
filter(abs(dif_FGP) >= 0.3) %>%
select(defender_name, player_name, dif_FGP)
second_team_records
# 建立網路關係
second_team_Network <- graph_from_data_frame(d=second_team_records, directed=T)
# 畫出網路圖
# 防守影響較大的關係：綠色
# 防守影響較小的關係：紅色
set.seed(222)
E(second_team_Network)$color <- ifelse(E(second_team_Network)$dif_FGP < 0 , "lightgreen", "palevioletred")
plot(second_team_Network, vertex.size=2, edge.arrow.size=0.3, vertex.label.cex=0.7)
# 挑出與防守者距離小於 4.92feet 的紀錄
no_wide_records <- pro_records %>%
filter(CLOSE_DEF_DIST <= 4.92)
no_wide_records
# 出手球員總命中率
n_field_goal_per <- no_wide_records %>%
group_by(player_name) %>%
mutate(total_FGM = sum(FGM), total_FG = n()) %>%
mutate(total_FGP = total_FGM/total_FG) %>%
ungroup()
# 出手球員與個別防守球員相對時之命中率
n_pair_def_records <- n_field_goal_per %>%
select(defender_name, player_name, FGM, total_FGP) %>%
group_by(defender_name, player_name, total_FGP) %>%
summarise(def_FGM = sum(FGM), def_FG = n()) %>%
mutate(def_FGP = def_FGM/def_FG) %>%
ungroup()
n_pair_def_records
# 個別組合間的防守效益差距
# 挑出相遇次數的大於 3 次的紀錄
# 挑出差異大於 25% 的組合
n_first_team_records <- n_pair_def_records %>%
filter(defender_name == "kawhi leonard" |
defender_name == "draymond green" |
defender_name == "deandre jordan" |
defender_name == "tony allen" |
defender_name == "chris paul") %>%
filter(def_FG >= 3) %>%
mutate(dif_FGP = def_FGP - total_FGP) %>%
filter(abs(dif_FGP) >= 0.3) %>%
select(defender_name, player_name, dif_FGP)
n_first_team_records
# 建立網路關係
n_first_team_Network <- graph_from_data_frame(d=n_first_team_records, directed=T)
# 畫出網路圖
# 防守影響較大的關係：綠色
# 防守影響較小的關係：紅色
set.seed(31)
E(n_first_team_Network)$color <- ifelse(E(n_first_team_Network)$dif_FGP < 0 , "lightgreen", "palevioletred")
plot(n_first_team_Network, vertex.size=2, edge.arrow.size=0.3, vertex.label.cex=0.7)
pro_records %>%
filter(defender_name == "deandre jordan") %>%
filter(CLOSE_DEF_DIST <= 25) %>%
mutate(CLOSE_DEF_DIST = CLOSE_DEF_DIST %/% 0.01 / 100) %>%
group_by(defender_name, CLOSE_DEF_DIST, SHOT_RESULT) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(defender_name, CLOSE_DEF_DIST) %>%
mutate(total = sum(count)) %>%
filter(SHOT_RESULT == "missed") %>%
mutate(per = count/total) %>%
ggplot(aes(x = CLOSE_DEF_DIST, y = per)) +
geom_point(size = 1) +
geom_smooth(method = "loess", formula = "y ~ x", se = FALSE) +
geom_vline(xintercept = 4.92, color = "blue") +
labs(x = "與攻擊者的距離", y = "防守成功率") +
theme(text = element_text(family = "Heiti TC Light")) +
ylim(0, 1)
pro_records %>%
filter(defender_name == "tony allen") %>%
filter(CLOSE_DEF_DIST <= 25) %>%
mutate(CLOSE_DEF_DIST = CLOSE_DEF_DIST %/% 0.01 / 100) %>%
group_by(defender_name, CLOSE_DEF_DIST, SHOT_RESULT) %>%
summarise(count = n()) %>%
ungroup() %>%
group_by(defender_name, CLOSE_DEF_DIST) %>%
mutate(total = sum(count)) %>%
filter(SHOT_RESULT == "missed") %>%
mutate(per = count/total) %>%
ggplot(aes(x = CLOSE_DEF_DIST, y = per)) +
geom_point(size = 1) +
geom_smooth(method = "loess", formula = "y ~ x", se = FALSE) +
geom_vline(xintercept = 4.92, color = "blue") +
labs(x = "與攻擊者的距離", y = "防守成功率") +
theme(text = element_text(family = "Heiti TC Light")) +
ylim(0, 1)
# 個別組合間的防守效益差距
# 挑出相遇次數的大於 3 次的紀錄
# 挑出差異大於 30% 的組合
n_second_team_records <- n_pair_def_records %>%
filter(defender_name == "anthony davis" |
defender_name == "tim duncan" |
defender_name == "andrew bogut" |
defender_name == "jimmy butler" |
defender_name == "john wall") %>%
filter(def_FG >= 3) %>%
mutate(dif_FGP = def_FGP - total_FGP) %>%
filter(abs(dif_FGP) >= 0.3) %>%
select(defender_name, player_name, dif_FGP)
n_second_team_records
# 建立網路關係
n_second_team_Network <- graph_from_data_frame(d=n_second_team_records, directed=T)
# 畫出網路圖
# 防守影響較大的關係：綠色
# 防守影響較小的關係：紅色
set.seed(2019)
E(n_second_team_Network)$color <- ifelse(E(n_second_team_Network)$dif_FGP < 0 , "lightgreen", "palevioletred")
plot(n_second_team_Network, vertex.size=2, edge.arrow.size=0.3, vertex.label.cex=0.7)
